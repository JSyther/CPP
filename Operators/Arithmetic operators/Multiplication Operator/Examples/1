Multiply two integers:

int x = 5;
int y = 10;
int z = x * y; // z will be 50


Multiply two floating-point numbers:

float x = 3.14;
float y = 2.0;
float z = x * y; // z will be 6.28


Multiply two double-precision floating-point numbers:

double x = 2.0;
double y = 1.5;
double z = x * y; // z will be 3.0


Multiply an integer by a floating-point number:

int x = 2;
float y = 1.5;
float z = x * y; // z will be 3.0


Multiply a variable by a constant value:

int x = 5;
int z = x * 10; // z will be 50


Multiply two numbers and store the result in one of the operands:

int x = 5;
int y = 10;
x *= y; // x will be 50


Use parentheses to change the order of operations:

int x = 5;
int y = 10;
int z = x + y * 2; // z will be 25 (not 30)


Multiply two complex numbers:

#include <complex>
using namespace std;

complex<double> x(1.0, 2.0);
complex<double> y(3.0, 4.0);
complex<double> z = x * y; // z will be (-5, 10)

// Formula == x * y = (1.0 + 2.0i) * (3.0 + 4.0i)
                    = (1.0 * 3.0 - 2.0 * 4.0) + (1.0 * 4.0 + 2.0 * 3.0)i
                     = -5.0 + 10.0i = (-5, 10)

------------------------------------------------------------------------------------------------------------------------------
Multiply a matrix by a scalar:

#include <iostream>
using namespace std;

int main() {
    int matrix[2][2] = {{1, 2}, {3, 4}};
    int scalar = 2;
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            matrix[i][j] *= scalar;
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
    // Output: 2 4
    //         6 8
    return 0;
}

Explanation:

We define the main function.

We declare a 2x2 matrix matrix and initialize it with the values {1, 2} and {3, 4}.

We declare an integer variable scalar and set its value to 2.

We start a nested loop that iterates through each element of the matrix.

The outer loop uses the variable i to iterate over the rows of the matrix.

The inner loop uses the variable j to iterate over the columns of the matrix.

For each element of the matrix, we multiply its value by the scalar value using the *= operator.
This is equivalent to multiplying the element by the scalar and storing the result back in the element.

We output the new value of the element to the console using cout.

After we finish iterating over all elements in a row, we output a newline character to the console to move to the next row.

After we finish iterating over all elements in the matrix, we exit the nested loop.

We return 0 to indicate successful program completion.

Now, let's break down the mathematical operations that are happening in the loop:

We start with the matrix:

[1 2]
[3 4]
We set the scalar value to 2.

We multiply each element of the matrix by the scalar value:


[1 * 2  2 * 2]
[3 * 2  4 * 2]
This gives us:


[2  4]
[6  8]
We output each element of the resulting matrix to the console, separated by spaces:

2 4
6 8
------------------------------------------------------------------------------------------------------------------------------


Use the multiplication operator with a user-defined class:

#include <iostream>
using namespace std;

class MyClass {
public:
    int value;
    MyClass(int value) : value(value) {}
    MyClass operator*(const MyClass& other) const {
        return MyClass(value * other.value);
    }
};

int main() {
    MyClass x(2);
    MyClass y(3);
    MyClass z = x * y; // z.value will be 6
    cout << z.value << endl;
    return 0;
}
