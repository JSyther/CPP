Multiply two integers:

int x = 5;
int y = 10;
int z = x * y; // z will be 50


Multiply two floating-point numbers:

float x = 3.14;
float y = 2.0;
float z = x * y; // z will be 6.28


Multiply two double-precision floating-point numbers:

double x = 2.0;
double y = 1.5;
double z = x * y; // z will be 3.0


Multiply an integer by a floating-point number:

int x = 2;
float y = 1.5;
float z = x * y; // z will be 3.0


Multiply a variable by a constant value:

int x = 5;
int z = x * 10; // z will be 50


Multiply two numbers and store the result in one of the operands:

int x = 5;
int y = 10;
x *= y; // x will be 50


Use parentheses to change the order of operations:

int x = 5;
int y = 10;
int z = x + y * 2; // z will be 25 (not 30)


Multiply two complex numbers:

#include <complex>
using namespace std;

complex<double> x(1.0, 2.0);
complex<double> y(3.0, 4.0);
complex<double> z = x * y; // z will be (-5, 10)


Multiply a matrix by a scalar:

#include <iostream>
using namespace std;

int main() {
    int matrix[2][2] = {{1, 2}, {3, 4}};
    int scalar = 2;
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            matrix[i][j] *= scalar;
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
    // Output: 2 4
    //         6 8
    return 0;
}


Use the multiplication operator with a user-defined class:

#include <iostream>
using namespace std;

class MyClass {
public:
    int value;
    MyClass(int value) : value(value) {}
    MyClass operator*(const MyClass& other) const {
        return MyClass(value * other.value);
    }
};

int main() {
    MyClass x(2);
    MyClass y(3);
    MyClass z = x * y; // z.value will be 6
    cout << z.value << endl;
    return 0;
}
